
# Created by: SomitraSR
# Network CloudFormation architecture script for aws.


Description:
  < SomitraSR
  CloudFormation
  

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names.
    Type: String
    
  ProjectName:
    Description: The project name you're working on.
    Type: String
  
  VpcCIDR: 
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the public subnet in the first availability zone.
    Type: String

  PublicSubnet2CIDR:
    Description: IP range (CIDR notation) for the public subnet in the first availability zone.
    Type: String

  PrivateSubnet1CIDR:
    Description: IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    
  PrivateSubnet2CIDR:
    Description: IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    
  

    


Resources:

  # Virtual Private Cloud
  VPC: 
      Type: AWS::EC2::VPC 
      Properties:
          CidrBlock: !Ref VpcCIDR # References the params.json file
          EnableDnsHostnames: true
          Tags: 
              - 
                Key: ProjectName
                Value: !Ref ProjectName
              - 
                Key: EntityName
                Value: Virtual Private Cloud
              -
                Key: EntityType
                Value: Virtual Private Cloud
              

  # Allows outside connection to your VPC
  # Allows inbound and outbound traffic from the outside world into your Private Cloud.
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - 
                Key: ProjectName
                Value: !Ref ProjectName

  # Internet Gateway        
  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC
          
# ========================
# Public Subnet Configs
# ========================
  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: Public Subnet (AZ1)
          - Key: ProjectName
            Value: !Sub ${ProjectName}
        
  
  # Public Subnet 2 
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet2CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: Public Subnet (AZ2)
          - Key: ProjectName
            Value: !Sub ${ProjectName}

# ========================
# Private Subnet Configs
# ========================

  # Private Subnet 1 
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnet1CIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: Private Subnet (AZ1)
          - Key: ProjectName
            Value: !Sub ${ProjectName}

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: !Ref PrivateSubnet2CIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: Private Subnet (AZ2)
          - Key: ProjectName
            Value: !Sub ${ProjectName}

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
        Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
        Domain: vpc

  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
          - Key: Name
            Value: NAT Gateway 1
          - Key: ProjectName
            Value: !Sub ${ProjectName}

  NatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2    
      Tags:
          - Key: Name
            Value: NAT Gateway 2
          - Key: ProjectName
            Value: !Sub ${ProjectName}        
  
  
# =========================
# Public Routes
# =========================

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: Public Route Table
          - Key: ProjectName
            Value: !Sub ${ProjectName}  

  # Route to gateway 
  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet 1 to the Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  # Associate Public Subnet 2 to the Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2


# =========================
# Private Routes
# =========================

  # Private Route Table 1
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: Private Route Table 1
          - Key: ProjectName
            Value: !Sub ${ProjectName}
  
  # Route to NAT Gateway 1
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  
  # Associate Private Subnet 1 to the Private Route table 1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  # Private Route Table 2
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: Private Route Table 2
          - Key: ProjectName
            Value: !Sub ${ProjectName}

  # Route to NAT Gateway 2
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
   
  # Associate Private Subnet 2 to the Private Route table 2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2


# ===========================
# Security Groups      
# ===========================

  # Load Balancer Security Group
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP in Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: TCP
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: TCP
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0                                                                                        

  # Security group for EC2 Instance.      
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: EC2 Security Group
      GroupName: EC2-SecurityGroup
      VpcId: !Ref VPC
      # Outbound Rules
      SecurityGroupEgress: 
      - IpProtocol: TCP
        FromPort: 0
        ToPort: 65535 
        CidrIp: 0.0.0.0/0
      # Inbound Rules  
      SecurityGroupIngress: 
      - Description: Inbound rule to allow the Load Balancer.
        IpProtocol: TCP
        SourceSecurityGroupId: !Ref LBSecGroup
        FromPort: 80
        ToPort: 80    
      Tags: 
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: EntityType
          Value: SecurityGroup

Outputs:
  VPC: 
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${ProjectName}-VPCID          

  PublicSubnets:
    Description: A list of the public subnet IDs
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${ProjectName}-Public-Subnet-IDs
  
  PublicSubnet1CIDR:
    Description: Public Subnet 1 CIDR
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub ${ProjectName}-Public-Subnet-1-CIDR

  PublicSubnet2CIDR:
    Description: Public Subnet 2 CIDR
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub ${ProjectName}-Public-Subnet-2-CIDR
  
  PublicSubnet1ID:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${ProjectName}-Public-Subnet-1-ID
  
  PublicSubnet2ID:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${ProjectName}-Public-Subnet-2-ID

  PrivateSubnets:
    Description: A list of the private subnet IDs
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${ProjectName}-Private-Subnet-IDs

  WebServerSecurityGroup:
    Description: Security group to be attached to an EC2 Instance.
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub ${ProjectName}-WebSecurityGroupID

  LBSecurityGroup:
    Description: Security Group to be attached to the Load Balancer
    Value: !Ref LBSecGroup    
    Export:
      Name: !Sub ${ProjectName}-LBSecurityGroupID
    